#!/usr/bin/env python3
# encoding=UTF-8

# Copyright Â© 2016-2022 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import configparser
import getpass
import json
import os
import subprocess
import tempfile
import urllib.request

0_0  # Python >= 3.6 is required

keys = [
    'name',
    'description',
    'homepage',
    'private',
    'has_issues',
    'has_projects',
    'has_wiki',
    'has_downloads',
    'default_branch',
]

def read_json(fp):
    with fp:
        data = fp.read()
        data = data.decode('UTF-8')
        return json.loads(data)

class GitEditor(object):

    def __init__(self, trust_cwd=False):
        cmdline = ['git', 'var', 'GIT_EDITOR']
        if not trust_cwd:
            cmdline[1:1] = ['-C', '/']
        editor = subprocess.check_output(cmdline)
        editor = editor.strip()
        self._editor = editor

    def edit(self, path):
        editor = self._editor
        subprocess.check_call(
            [editor + b' "$@"', editor, path],
            shell=True
        )

class UserAgent(object):

    def _request(self, method, url, *, data=None):
        token = os.environ['GITHUB_TOKEN']
        headers = {
            'User-Agent': 'github-editmeta (https://github.com/jwilk/github-editmeta)',
            'Authorization': ('token ' + token),
            'Accept': 'application/vnd.github.v3+json',
        }
        url = urllib.parse.urljoin('https://api.github.com', url)
        request = urllib.request.Request(url, headers=headers, method=method, data=data)
        try:
            return urllib.request.urlopen(request)
        except urllib.error.HTTPError as exc:
            msg = json.dumps(read_json(exc), sort_keys=True, indent=4)
            exc.msg += '\n\n' + msg
            raise

    def get(self, url):
        return self._request('GET', url)

    def patch(self, url, *, data):
        return self._request('PATCH', url, data=data)

    def delete(self, url):
        return self._request('DELETE', url)

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('repo', metavar='REPO')
    options = ap.parse_args()
    repo = options.repo
    clone_url_base = 'https://github.com/'
    if repo.startswith(clone_url_base):
        repo = repo[len(clone_url_base):]
    if '/' not in repo:
        user = getpass.getuser()
        urepo = f'{user}/{repo}'
        ap.error(f'bad repository name; did you mean {urepo!r}?')
    repo_url = '/repos/' + repo
    http = UserAgent()
    response = http.get(repo_url)
    orig_data = read_json(response)
    config = configparser.ConfigParser(interpolation=None)
    config[repo] = {}
    for key in keys:
        value = orig_data[key]
        if isinstance(value, bool):
            value = ('no', 'yes')[value]
        elif value is None:
            value = ''
        config[repo][key] = value
    editor = GitEditor()
    with tempfile.TemporaryDirectory(prefix='github-editmeta.') as tmpdir:
        path = os.path.join(tmpdir, 'meta.ini')
        with open(path, 'w+t') as file:
            config.write(file)
        editor.edit(path)
        config = configparser.ConfigParser(interpolation=None)
        with open(path, 'rt') as file:
            config.read_file(file)
    if config.getboolean(repo, 'delete', fallback=False):
        http.delete(repo_url)
        return
    data = {}
    for key in keys:
        orig_value = orig_data[key]
        try:
            if isinstance(orig_value, bool):
                value = config.getboolean(repo, key)
            else:
                value = config.get(repo, key)
                if not value.strip():
                    value = None
        except configparser.NoOptionError:
            continue
        if value != orig_value:
            data[key] = value
    if not data:
        return
    json_data = json.dumps(data).encode('UTF-8')
    http.patch(repo_url, data=json_data)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
